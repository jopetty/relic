"""Calculate how many strings of length k are generated by a grammar G."""

import itertools
import logging
import pathlib

import fire
import pandas as pd
import pyrootutils
import tqdm

import formal_gym.grammar as fg_grammar
import formal_gym.utils.utils as fg_utils

logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    datefmt="%Y-%d-%m %H:%M:%S",
    level=logging.INFO,
)

log = fg_utils.get_logger(__name__)

PROJECT_ROOT = path = pyrootutils.find_root(
    search_from=__file__, indicator=".project-root"
)


def count_strings(
    grammar_file: pathlib.Path | str,
    data_path: pathlib.Path | str = PROJECT_ROOT / "data",
    max_k: int = 7,
):
    if isinstance(grammar_file, str):
        grammar_file = pathlib.Path(grammar_file)

    grammar_path = data_path / grammar_file

    grammar = fg_grammar.Grammar.from_file(grammar_path)
    terminals = list(set(grammar.terminals))

    counts = []

    n = len(terminals)
    num_strings = int((n ** (max_k + 1) - 1) / (n - 1)) - 1

    # generate all combinations of terminals of length k
    with tqdm.tqdm(total=num_strings) as pbar:
        for k in range(1, max_k + 1):
            combs = itertools.product(terminals, repeat=k)
            pos_count = 0
            count = 0
            for c in combs:
                pbar.update(1)
                pbar.refresh()
                count += 1
                c_sample = " ".join(c)
                if grammar.test_sample(c_sample):
                    pos_count += 1
            pos_ratio = pos_count / float(count) if count > 0 else 0
            counts.append(
                {
                    "sample.length": k,
                    "num_samples": count,
                    "num_positive_samples": pos_count,
                    "prop_positive_samples": pos_ratio,
                }
            )

    counts_df = pd.DataFrame(counts)

    outfile_path = (
        data_path / "partitions" / f"counts_{grammar_file.stem}_k={max_k}.csv"
    )

    counts_df.to_csv(outfile_path, index=False)
    log.info(f"Counts saved to {outfile_path}")
    log.info(f"\n{counts_df}")


if __name__ == "__main__":
    fire.Fire(count_strings)
