import dataclasses
import json


@dataclasses.dataclass(frozen=True)
class ChatCompletionResponse:
    user_prompt: str
    metadata: dict[str, str]
    # system_prompt: str = "You are a helpful assistant."
    # max_tokens: int = 1024

    def to_openai_batched_json(self, model: str, custom_id: str) -> str:
        return json.dumps(
            {
                "custom_id": custom_id,
                "method": "POST",
                "url": "/v1/chat/completions",
                "body": {
                    "model": model,
                    "messages": [
                        # {"role": "system", "content": self.system_prompt},
                        {"role": "user", "content": self.user_prompt},
                    ],
                    # "max_tokens": self.max_tokens,
                    "metadata": self.metadata,
                    "store": True if self.metadata else False,
                },
            }
        )


def basic_prompt(grammar_str: str, sample: str, shots: dict[str, list[str]]) -> str:
    """Creates a prompt for the LLM based on the grammar and sample.

    Args:
        grammar_str: The grammar in string format.
        sample: The sample to evaluate.
        shots: A dictionary containing positive and negative samples. There should be
          exactly two keys, `positive` and `negative`.
    """

    # Ensure we don't accidentally leak the sample into the shots
    assert (
        sample not in shots["positive"]
    ), f"{sample} is in positive samples: {shots['positive']}"
    assert (
        sample not in shots["negative"]
    ), f"{sample} is in negative samples: {shots['negative']}"

    prefix = f"""You will be presented with a context-free grammar in Chomsky normal form and a string which may or may not be in the language defined by the given grammar. Your job is to determine whether or not the grammar generates the provided string. You can use any reasoning strategy you like, but you must end your response with either 'Yes' (if the string is generated by the grammar) or 'No' (if it isn't.)\n\nGrammar: ```{grammar_str}\n\n"""  # noqa: E501

    if shots["positive"]:
        few_shot = """Here are some examples of some positive and negative samples from the provided grammar. The order in which the samples are listed is irrelevant. Labeled samples:\n"""  # noqa: E501
        for ds in shots["positive"]:
            few_shot += f"- `{ds}` -> Yes\n"
        for ds in shots["negative"]:
            few_shot += f"- `{ds}` -> No\n"
        few_shot += "\n"
    else:
        few_shot = ""

    question = f"""Here is the string you need to evaluate:\n\nString: `{sample}`.\n\nRemember, end your response with either 'Yes' or 'No'."""  # noqa: E501

    return prefix + few_shot + question
