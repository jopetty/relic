import dataclasses
import json


@dataclasses.dataclass(frozen=True)
class ChatCompletionResponse:
    user_prompt: str
    metadata: dict[str, str]
    # system_prompt: str = "You are a helpful assistant."
    # max_tokens: int = 1024

    def to_openai_batched_json(self, model: str, custom_id: str) -> str:
        return json.dumps(
            {
                "custom_id": custom_id,
                "method": "POST",
                "url": "/v1/chat/completions",
                "body": {
                    "model": model,
                    "messages": [
                        # {"role": "system", "content": self.system_prompt},
                        {"role": "user", "content": self.user_prompt},
                    ],
                    # "max_tokens": self.max_tokens,
                    "metadata": self.metadata,
                    "store": True if self.metadata else False,
                },
            }
        )


def basic_prompt(grammar_str: str, sample: str, shots: dict[str, list[str]]) -> str:
    """Creates a prompt for the LLM based on the grammar and sample.

    Args:
        grammar_str: The grammar in string format.
        sample: The sample to evaluate.
        shots: A dictionary containing positive and negative samples. There should be
          exactly two keys, `positive` and `negative`.
    """

    sample = sample.strip()

    # Ensure we don't accidentally leak the sample into the shots
    assert (
        sample not in shots["positive"]
    ), f"{sample} is in positive samples: {shots['positive']}"
    assert (
        sample not in shots["negative"]
    ), f"{sample} is in negative samples: {shots['negative']}"

    prefix = f"""You will be presented with a context-free grammar in Chomsky normal form and a string which may or may not be in the language defined by the given grammar. Your job is to determine whether or not the grammar generates the provided string. You can use any reasoning strategy you like, but you must end your response with either 'Yes' (if the string is generated by the grammar) or 'No' (if it isn't.)\n\nGrammar: ```{grammar_str}\n\n"""  # noqa: E501

    if shots["positive"]:
        few_shot = """Here are some examples of some positive and negative samples from the provided grammar. The order in which the samples are listed is irrelevant. Labeled samples:\n"""  # noqa: E501
        for ds in shots["positive"]:
            few_shot += f"- `{ds}` -> Yes\n"
        for ds in shots["negative"]:
            few_shot += f"- `{ds}` -> No\n"
        few_shot += "\n"
    else:
        few_shot = ""

    question = f"""Here is the string you need to evaluate:\n\nString: `{sample}`.\n\nRemember, end your response with either 'Yes' or 'No'."""  # noqa: E501

    return prefix + few_shot + question


def grammar_free_baseline(
    grammar_str: str, sample: str, shots: dict[str, list[str]]
) -> str:
    """Creates a prompt for the LLM which does not include the provided grammar.

    This prompt is used as a baseline to see whether models are actually using the
    grammar, or are instead relying solely on heuristics divided from the provided
    shots.

    Args:
        grammar_str: The grammar in string format.
        sample: The sample to evaluate.
        shots: A dictionary containing positive and negative samples. There should be
          exactly two keys, `positive` and `negative`.
    """

    sample = sample.strip()

    # Ensure we don't accidentally leak the sample into the shots
    assert (
        sample not in shots["positive"]
    ), f"{sample} is in positive samples: {shots['positive']}"
    assert (
        sample not in shots["negative"]
    ), f"{sample} is in negative samples: {shots['negative']}"

    assert shots["positive"], "Positive samples must be provided."
    assert shots["negative"], "Negative samples must be provided."

    prefix = """You will be presented with a string which may or may not be in a
    language defined by an unknown context-free grammar. You will be provided with labeled examples of strings which are in the grammar and strings which are not. Your job is to determine whether or not the provided string is in the language generated by the grammar which generated the positive samples. You can use any reasoning strategy you like, but you must end your response with either 'Yes' (if the string is generated by the grammar) or 'No' (if it isn't.)\n\n"""  # noqa: E501

    few_shot = """Here are some examples of some positive and negative samples from the provided grammar. The order in which the samples are listed is irrelevant. Labeled samples:\n"""  # noqa: E501
    for ds in shots["positive"]:
        few_shot += f"- `{ds}` -> Yes\n"
    for ds in shots["negative"]:
        few_shot += f"- `{ds}` -> No\n"
    few_shot += "\n"

    question = f"""Here is the string you need to evaluate:\n\nString: `{sample}`.\n\nRemember, end your response with either 'Yes' or 'No'."""  # noqa: E501

    return prefix + few_shot + question
